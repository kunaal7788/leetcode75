In the world of Dota2, there are two parties: the Radiant and the Dire.

The Dota2 senate consists of senators coming from two parties. Now the Senate wants to decide on a change in the Dota2 game. The voting for this change is a round-based procedure. In each round, each senator can exercise one of the two rights:

Ban one senator's right: A senator can make another senator lose all his rights in this and all the following rounds.
Announce the victory: If this senator found the senators who still have rights to vote are all from the same party, he can announce the victory and decide on the change in the game.
Given a string senate representing each senator's party belonging. The character 'R' and 'D' represent the Radiant party and the Dire party. Then if there are n senators, the size of the given string will be n.

The round-based procedure starts from the first senator to the last senator in the given order. This procedure will last until the end of voting. All the senators who have lost their rights will be skipped during the procedure.

Suppose every senator is smart enough and will play the best strategy for his own party. Predict which party will finally announce the victory and change the Dota2 game. The output should be "Radiant" or "Dire".

 

Example 1:

Input: senate = "RD"
Output: "Radiant"
Explanation: 
The first senator comes from Radiant and he can just ban the next senator's right in round 1. 
And the second senator can't exercise any rights anymore since his right has been banned. 
And in round 2, the first senator can just announce the victory since he is the only guy in the senate who can vote.
Solution :- 



from collections import deque

class Solution:
    def predictPartyVictory(self, senate: str) -> str:
        # Initialize two deques to keep track of the index positions of Radiant ('R') and Dire ('D') senators.
        queue_R = deque()  # Queue for Radiant senators
        queue_D = deque()  # Queue for Dire senators

        # Step 1: Populate the queues with the indices of the Radiant and Dire senators.
        for idx, char in enumerate(senate):
            if char == 'R':
                queue_R.append(idx) 
            elif char == 'D':
                queue_D.append(idx)
        
        # 'next_round_idx' will help simulate the circular nature of the senate. 
        # After each round, the banned senator is "removed", while the senator who bans them gets added back with a new index.
        next_round_idx = len(senate)

        # Step 2: Simulate the voting process in a round-based manner.
        # The process continues until one of the queues becomes empty, meaning one party has no senators left.
        while queue_R and queue_D:
            # Get the first Radiant and Dire senator from their respective queues.
            front_R = queue_R.popleft()
            front_D = queue_D.popleft()

            # Compare their indices:
            # The senator with the smaller index acts first (since they appear earlier in the round).
            if front_R < front_D:
                # Radiant senator bans Dire senator, so Radiant senator remains.
                # The Radiant senator is re-added to the queue with a new index for the next round.
                queue_R.append(next_round_idx)
                next_round_idx += 1  # Increment the index for the next available position
            elif front_D < front_R:
                # Dire senator bans Radiant senator, so Dire senator remains.
                # The Dire senator is re-added to the queue with a new index for the next round.
                queue_D.append(next_round_idx)
                next_round_idx += 1

        # Step 3: Determine the winning party.
        # If there are any Radiant senators left, Radiant wins. Otherwise, Dire wins.
        if queue_R:
            return 'Radiant'
        else:
            return 'Dire'